// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  password      String?
  role          UserRole @default(USER)
  accounts      Account[]
  isTwoFactorEnabled  Boolean @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id String @id @default(cuid())
  email String
  token String @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Profiles {
  id            String    @id @default(cuid())
  section       String
  title         String
  subtitle      String
  body          String
  image         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Teacher {
  id            String    @id @default(cuid())
  name          String
  education     String
  subjects      String
  position      String
  whatsapp      String
  image         String
  elearning     Elearning[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Posts {
  id            String    @id @default(cuid())
  category      String
  title         String
  body          String
  image         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Elearning {
  id            String    @id @default(cuid())
  teacherId     String
  classroom     String
  subject       String
  body          String
  image         String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  teacher Teacher @relation(fields: [teacherId], references: [id], onDelete: Cascade)
}

model Ppdb {
  id                          String    @id @default(cuid())
  status                      String
  registernumber              String
  fullname                    String
  nickname                    String
  numberbirthcertificate      String
  nik                         String
  gender                      String
  childnumber                 String
  siblings                    String
  placeofbirth                String
  dateofbirth                 DateTime
  address                     String
  livewith                    String
  childstatus                 String
  nisn                        String
  kindergarten                String
  kindergartenaddress         String
  fathersname                 String
  fathersnumber               String
  fathersplaceofbirth         String
  fathersdateofbirth          DateTime
  fathersjob                  String
  fathersnameoftheagency      String?
  fathersaddressoftheagency   String?
  fatherslasteducation        String
  fathersincome               String
  mothersname                 String
  mothersnumber               String
  mothersplaceofbirth         String
  mothersdateofbirth          DateTime
  mothersjob                  String
  mothersnameoftheagency      String?
  mothersaddressoftheagency   String?
  motherslasteducation        String
  mothersincome               String?
  filesfamilycard             String
  filesbirthcertificate       String
  filescertificate            String
  filesphotos                 String
  filespayment                String
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt
}